{"version":3,"sources":["client/index.tsx","client/components/App.tsx"],"names":[],"mappings":";;;;;;AAAA,+CAA+E;AAC/E,+BAA+B;AAC/B,sCAAsC;AAGtC,0CAAmC;AAgBnC,QAAQ,CAAC,MAAM,CAEX,oBAAC,qBAAM;IACL,oBAAC,oBAAK,IAAC,IAAI,EAAC,GAAG,EAAC,SAAS,EAAE,aAAG;QAC5B,oBAAC,yBAAU,OAAG;QACd,oBAAC,oBAAK,IAAC,IAAI,EAAC,MAAM,GAAG,CACf,CACD,EAEX,QAAQ,CAAC,cAAc,CAAE,WAAW,CAAa,CAClD,CAAC;;;;;;;AC/BF,+BAA+B;AAG/B,SAAyB,SAAQ,KAAK,CAAC,SAAiB;IAMtD,YAAY;QACV,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IAEF,MAAM;QACJ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACrB,MAAM,CAAC,CACL;YACE,gCAAQ,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,eAAmB,CAC3D,CACR,CAAC;IACJ,CAAC;CACF;AAlBD,sBAkBC;AAAA,CAAC","file":"","sourcesContent":["import { Router, IndexRoute, Route, /* browserHistory */ } from 'react-router';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import ReduxThunk from 'redux-thunk';\nimport App from './components/App';\n// import { routerMiddleware } from \"react-router-redux\";\n// import { compose } from \"redux\";\n// import { createStore } from \"redux\";\n// import { combineReducers } from \"redux\";\n// import { applyMiddleware } from \"redux\";\n\n// const middlewares = [ReduxThunk, routerMiddleware(browserHistory)];\n// const reducers = combineReducers({});\n// const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// export const store = createStore(reducers, composeEnhancers(\n//   applyMiddleware(...middlewares)\n// ));\n  // <Provider store={store}>\n// </Provider>\nReactDOM.render(\n\n    <Router>\n      <Route path='/' component={App}>\n        <IndexRoute />\n        <Route path='/app' />\n      </Route>\n    </Router>\n  ,\n  document.getElementById( 'container' ) as Element\n);","import * as React from 'react';\n// const actions   = require( '../../actions' );\n\nexport default class App extends React.Component<{}, {}> {\n\n  // actionKeys: [\n  //   actions.GET_MATCH\n  // ],\n\n  clickHandler() {\n    console.log('clicking me');\n  };\n\n  render() {\n    console.log('render')\n    return (\n      <main>\n        <button onClick={this.clickHandler.bind(this)}>Click me</button>\n      </main>\n    );\n  }\n};\n"]}